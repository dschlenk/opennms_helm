# To troubleshoot and get more log info enable ldap debug logging in grafana.ini
# [log]
# filters = ldap:debug

[[servers]]
# Ldap server host (specify multiple hosts space separated)
host = "<%= @ldap['host'] %>"
# Default port is 389 or 636 if use_ssl = true
port = <%= @ldap['port'] %>
# Set to true if ldap server supports TLS
use_ssl = <%= @ldap['use_ssl'] %>
# Set to true if connect ldap server with STARTTLS pattern (create connection in insecure, then upgrade to secure connection with TLS)
start_tls = <%= @ldap['start_tls'] %>
# set to true if you want to skip ssl cert validation
ssl_skip_verify = <%= @ldap['ssl_skip_verify'] %>
# set to the path to your root CA certificate or leave unset to use system defaults
# root_ca_cert = "/path/to/certificate.crt"
<% if !@ldap['root_ca_cert'].nil? -%>
root_ca_cert = "<%= @ldap['root_ca_cert'] %>"
<% end -%>

# Search user bind dn
bind_dn = "<%= @ldap['bind_dn'] %>"
# Search user bind password
# If the password contains # or ; you have to wrap it with trippel quotes. Ex """#password;"""
bind_password = '<%= @ldap['bind_password'] %>'

# User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
search_filter = "<%= @ldap['search_filter'] %>"

# An array of base dns to search through
search_base_dns = <%= @ldap['search_base_dns'] %>

# In POSIX LDAP schemas, without memberOf attribute a secondary query must be made for groups.
# This is done by enabling group_search_filter below. You must also set member_of= "cn"
# in [servers.attributes] below.

# Users with nested/recursive group membership and an LDAP server that supports LDAP_MATCHING_RULE_IN_CHAIN
# can set group_search_filter, group_search_filter_user_attribute, group_search_base_dns and member_of
# below in such a way that the user's recursive group membership is considered.
#
# Nested Groups + Active Directory (AD) Example:
#
#   AD groups store the Distinguished Names (DNs) of members, so your filter must
#   recursively search your groups for the authenticating user's DN. For example:
#
#     group_search_filter = "(member:1.2.840.113556.1.4.1941:=%s)"
#     group_search_filter_user_attribute = "distinguishedName"
#     group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]
#
#     [servers.attributes]
#     ...
#     member_of = "distinguishedName"

## Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available)
# group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
<% if !@ldap['group_search_filter'].nil? -%>
group_search_filter = "<%= @ldap['group_search_filter'] %>"
<% end -%>
## Group search filter user attribute defines what user attribute gets substituted for %s in group_search_filter.
## Defaults to the value of username in [server.attributes]
## Valid options are any of your values in [servers.attributes]
## If you are using nested groups you probably want to set this and member_of in
## [servers.attributes] to "distinguishedName"
# group_search_filter_user_attribute = "distinguishedName"
<% if !@ldap['group_search_filter_user_attribute'].nil? -%>
group_search_filter_user_attribute = "<%= @ldap['group_search_filter_user_attribute'] %>"
<% end -%>
## An array of the base DNs to search through for groups. Typically uses ou=groups
# group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]
<% if !@ldap['group_search_base_dns'].nil? -%>
group_search_base_dns = <%= @ldap['group_search_base_dns'] %>
<% end -%>

# Specify names of the ldap attributes your ldap uses
[servers.attributes]
name = "<%=@ldap['servers.attributes']['name']%>"
surname = "<%=@ldap['servers.attributes']['surname']%>"
username = "<%=@ldap['servers.attributes']['username']%>"
member_of = "<%=@ldap['servers.attributes']['member_of']%>"
email =  "<%=@ldap['servers.attributes']['email']%>"

<% @ldap['servers.group_mappings'].each do |group| -%>
[[servers.group_mappings]]
group_dn = "<%= group['group_dn'] %>"
org_role = "<%= group['org_role'] %>"
  <% if !group['org_id'].nil? -%>
org_id = <%= group['org_id'] %>
  <% end -%>
<% end -%>
